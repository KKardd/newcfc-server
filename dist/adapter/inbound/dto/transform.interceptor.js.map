{"version":3,"sources":["../../../../src/adapter/inbound/dto/transform.interceptor.ts"],"sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { Observable, map } from 'rxjs';\nimport { Pagination } from './pagination';\nimport { NO_GLOBAL_INTERCEPTOR } from '@/config/no-global-interceptor.decorator';\n\nexport type Response<T> = {\n  data: T;\n  pagination?: Pagination;\n};\n\n@Injectable()\nexport class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\n  private readonly reflector = new Reflector();\n\n  intercept(context: ExecutionContext, next: CallHandler<T>): Observable<Response<T>> {\n    const noGlobalInterceptor = this.reflector.getAllAndOverride<boolean>(NO_GLOBAL_INTERCEPTOR, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (noGlobalInterceptor) {\n      return next.handle() as any;\n    }\n\n    return next.handle().pipe(\n      map((data) => {\n        const response = data as any;\n\n        if (response?.pagination) {\n          return data as Response<T>;\n        }\n        return { data };\n      }),\n    );\n  }\n}\n"],"names":["TransformInterceptor","intercept","context","next","noGlobalInterceptor","reflector","getAllAndOverride","NO_GLOBAL_INTERCEPTOR","getHandler","getClass","handle","pipe","map","data","response","pagination","Reflector"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBAb8D;sBACjD;sBAEM;8CAEM;;;;;;;AAQ/B,IAAA,AAAMA,uBAAN,MAAMA;IAGXC,UAAUC,OAAyB,EAAEC,IAAoB,EAA2B;QAClF,MAAMC,sBAAsB,IAAI,CAACC,SAAS,CAACC,iBAAiB,CAAUC,mDAAqB,EAAE;YAC3FL,QAAQM,UAAU;YAClBN,QAAQO,QAAQ;SACjB;QAED,IAAIL,qBAAqB;YACvB,OAAOD,KAAKO,MAAM;QACpB;QAEA,OAAOP,KAAKO,MAAM,GAAGC,IAAI,CACvBC,IAAAA,SAAG,EAAC,CAACC;YACH,MAAMC,WAAWD;YAEjB,IAAIC,UAAUC,YAAY;gBACxB,OAAOF;YACT;YACA,OAAO;gBAAEA;YAAK;QAChB;IAEJ;;aAtBiBR,YAAY,IAAIW,eAAS;;AAuB5C"}