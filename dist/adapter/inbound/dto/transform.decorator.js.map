{"version":3,"sources":["../../../../src/adapter/inbound/dto/transform.decorator.ts"],"sourcesContent":["import { Transform, TransformOptions } from 'class-transformer';\n\nimport { transferNumberFormat } from '@/util/digit';\n\nexport const TransformEntity = <T>(transformFn: (value: T) => unknown, options?: TransformOptions): PropertyDecorator => {\n  return Transform(\n    (params) => {\n      return transformFn(params.obj as T);\n    },\n    {\n      ...options,\n      toClassOnly: true,\n    },\n  );\n};\n\nexport const TransformBoolStringToBoolean = (): PropertyDecorator => {\n  return Transform(({ value }) => {\n    return value.toLowerCase() === 'true';\n  });\n};\n\nexport const TransformNumberFormat = (min: number = 0, max: number = 10): PropertyDecorator => {\n  return Transform(({ value }) => {\n    if (typeof value === 'string') {\n      const numberValue = Number(value.replace(/,/g, ''));\n\n      return transferNumberFormat(numberValue, { minimumFractionDigits: min, maximumFractionDigits: max });\n    } else if (typeof value === 'number') {\n      return transferNumberFormat(value, { minimumFractionDigits: min, maximumFractionDigits: max });\n    } else {\n      return value;\n    }\n  });\n};\n\nexport const TransformToDefaultString = (defaultValue: string = ''): PropertyDecorator => {\n  return Transform(({ value }) => value ?? defaultValue);\n};\n\nexport const TransformStringToNumber = (): PropertyDecorator => {\n  return Transform(({ value }) => {\n    if (value == null) {\n      return null;\n    }\n\n    const number = Number(value);\n\n    if (isNaN(number)) {\n      return null;\n    }\n\n    return number;\n  });\n};\n\nexport const TransformSortCondition = (): PropertyDecorator => {\n  return Transform(({ value }) => {\n    return value\n      .split(',')\n      .map((sort: string) => {\n        const [key, order] = sort.split('+');\n\n        return { [key]: order };\n      })\n      .reduce((acc: object, cur: object) => ({ ...acc, ...cur }), {});\n  });\n};\n"],"names":["TransformBoolStringToBoolean","TransformEntity","TransformNumberFormat","TransformSortCondition","TransformStringToNumber","TransformToDefaultString","transformFn","options","Transform","params","obj","toClassOnly","value","toLowerCase","min","max","numberValue","Number","replace","transferNumberFormat","minimumFractionDigits","maximumFractionDigits","defaultValue","number","isNaN","split","map","sort","key","order","reduce","acc","cur"],"mappings":";;;;;;;;;;;IAgBaA,4BAA4B;eAA5BA;;IAZAC,eAAe;eAAfA;;IAkBAC,qBAAqB;eAArBA;;IAkCAC,sBAAsB;eAAtBA;;IAhBAC,uBAAuB;eAAvBA;;IAJAC,wBAAwB;eAAxBA;;;kCApC+B;uBAEP;AAE9B,MAAMJ,kBAAkB,CAAIK,aAAoCC;IACrE,OAAOC,IAAAA,2BAAS,EACd,CAACC;QACC,OAAOH,YAAYG,OAAOC,GAAG;IAC/B,GACA;QACE,GAAGH,OAAO;QACVI,aAAa;IACf;AAEJ;AAEO,MAAMX,+BAA+B;IAC1C,OAAOQ,IAAAA,2BAAS,EAAC,CAAC,EAAEI,KAAK,EAAE;QACzB,OAAOA,MAAMC,WAAW,OAAO;IACjC;AACF;AAEO,MAAMX,wBAAwB,CAACY,MAAc,CAAC,EAAEC,MAAc,EAAE;IACrE,OAAOP,IAAAA,2BAAS,EAAC,CAAC,EAAEI,KAAK,EAAE;QACzB,IAAI,OAAOA,UAAU,UAAU;YAC7B,MAAMI,cAAcC,OAAOL,MAAMM,OAAO,CAAC,MAAM;YAE/C,OAAOC,IAAAA,2BAAoB,EAACH,aAAa;gBAAEI,uBAAuBN;gBAAKO,uBAAuBN;YAAI;QACpG,OAAO,IAAI,OAAOH,UAAU,UAAU;YACpC,OAAOO,IAAAA,2BAAoB,EAACP,OAAO;gBAAEQ,uBAAuBN;gBAAKO,uBAAuBN;YAAI;QAC9F,OAAO;YACL,OAAOH;QACT;IACF;AACF;AAEO,MAAMP,2BAA2B,CAACiB,eAAuB,EAAE;IAChE,OAAOd,IAAAA,2BAAS,EAAC,CAAC,EAAEI,KAAK,EAAE,GAAKA,SAASU;AAC3C;AAEO,MAAMlB,0BAA0B;IACrC,OAAOI,IAAAA,2BAAS,EAAC,CAAC,EAAEI,KAAK,EAAE;QACzB,IAAIA,SAAS,MAAM;YACjB,OAAO;QACT;QAEA,MAAMW,SAASN,OAAOL;QAEtB,IAAIY,MAAMD,SAAS;YACjB,OAAO;QACT;QAEA,OAAOA;IACT;AACF;AAEO,MAAMpB,yBAAyB;IACpC,OAAOK,IAAAA,2BAAS,EAAC,CAAC,EAAEI,KAAK,EAAE;QACzB,OAAOA,MACJa,KAAK,CAAC,KACNC,GAAG,CAAC,CAACC;YACJ,MAAM,CAACC,KAAKC,MAAM,GAAGF,KAAKF,KAAK,CAAC;YAEhC,OAAO;gBAAE,CAACG,IAAI,EAAEC;YAAM;QACxB,GACCC,MAAM,CAAC,CAACC,KAAaC,MAAiB,CAAA;gBAAE,GAAGD,GAAG;gBAAE,GAAGC,GAAG;YAAC,CAAA,GAAI,CAAC;IACjE;AACF"}