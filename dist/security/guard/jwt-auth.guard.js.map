{"version":3,"sources":["../../../src/security/guard/jwt-auth.guard.ts"],"sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { CustomException } from '@/exception/custom.exception';\nimport { ErrorCode } from '@/exception/error-code.enum';\nimport { RedisService } from '@/infrastructure/redis/redis.service';\nimport { TokenProvider } from '@/security/jwt/token.provider';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(\n    private readonly tokenProvider: TokenProvider,\n    private redisService: RedisService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const authorization = request.headers['authorization'];\n\n    if (!authorization) {\n      throw new CustomException(ErrorCode.INVALID_TOKEN);\n    }\n\n    const accessToken = /^Bearer (.*)$/.exec(authorization)?.[1];\n\n    if (!accessToken) {\n      throw new CustomException(ErrorCode.INVALID_TOKEN);\n    }\n\n    try {\n      const decoded = await this.tokenProvider.verifyAccessToken(accessToken);\n      request.user = decoded;\n      const userId = request.user.payload.userId;\n\n      try {\n        const refreshToken = await this.redisService.getClient().get(`refresh_${userId}`);\n\n        if (!refreshToken) {\n          throw new CustomException(ErrorCode.INVALID_TOKEN);\n        }\n\n        await this.tokenProvider.verifyRefreshToken(refreshToken);\n      } catch (error) {\n        const message = error instanceof Error ? error.message : undefined;\n        throw new CustomException(ErrorCode.INVALID_TOKEN, message);\n      }\n\n      return true;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : undefined;\n      throw new CustomException(ErrorCode.INVALID_TOKEN, message);\n    }\n  }\n}\n"],"names":["JwtAuthGuard","canActivate","context","request","switchToHttp","getRequest","authorization","headers","CustomException","ErrorCode","INVALID_TOKEN","accessToken","exec","decoded","tokenProvider","verifyAccessToken","user","userId","payload","refreshToken","redisService","getClient","get","verifyRefreshToken","error","message","Error","undefined","constructor"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBAR6C;iCAE1B;+BACN;8BACG;+BACC;;;;;;;;;;AAGvB,IAAA,AAAMA,eAAN,MAAMA;IAMX,MAAMC,YAAYC,OAAyB,EAAoB;QAC7D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,gBAAgBH,QAAQI,OAAO,CAAC,gBAAgB;QAEtD,IAAI,CAACD,eAAe;YAClB,MAAM,IAAIE,gCAAe,CAACC,wBAAS,CAACC,aAAa;QACnD;QAEA,MAAMC,cAAc,gBAAgBC,IAAI,CAACN,gBAAgB,CAAC,EAAE;QAE5D,IAAI,CAACK,aAAa;YAChB,MAAM,IAAIH,gCAAe,CAACC,wBAAS,CAACC,aAAa;QACnD;QAEA,IAAI;YACF,MAAMG,UAAU,MAAM,IAAI,CAACC,aAAa,CAACC,iBAAiB,CAACJ;YAC3DR,QAAQa,IAAI,GAAGH;YACf,MAAMI,SAASd,QAAQa,IAAI,CAACE,OAAO,CAACD,MAAM;YAE1C,IAAI;gBACF,MAAME,eAAe,MAAM,IAAI,CAACC,YAAY,CAACC,SAAS,GAAGC,GAAG,CAAC,CAAC,QAAQ,EAAEL,QAAQ;gBAEhF,IAAI,CAACE,cAAc;oBACjB,MAAM,IAAIX,gCAAe,CAACC,wBAAS,CAACC,aAAa;gBACnD;gBAEA,MAAM,IAAI,CAACI,aAAa,CAACS,kBAAkB,CAACJ;YAC9C,EAAE,OAAOK,OAAO;gBACd,MAAMC,UAAUD,iBAAiBE,QAAQF,MAAMC,OAAO,GAAGE;gBACzD,MAAM,IAAInB,gCAAe,CAACC,wBAAS,CAACC,aAAa,EAAEe;YACrD;YAEA,OAAO;QACT,EAAE,OAAOD,OAAO;YACd,MAAMC,UAAUD,iBAAiBE,QAAQF,MAAMC,OAAO,GAAGE;YACzD,MAAM,IAAInB,gCAAe,CAACC,wBAAS,CAACC,aAAa,EAAEe;QACrD;IACF;IA1CAG,YACE,AAAiBd,aAA4B,EAC7C,AAAQM,YAA0B,CAClC;aAFiBN,gBAAAA;aACTM,eAAAA;IACP;AAwCL"}