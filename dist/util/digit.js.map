{"version":3,"sources":["../../src/util/digit.ts"],"sourcesContent":["export const transferNumberFormat = (val?: number | null, options?: Intl.NumberFormatOptions): string | unknown => {\n  const numberFormat = new Intl.NumberFormat('en', options);\n\n  if (val === null || val === undefined) {\n    return val;\n  }\n\n  return numberFormat.format(val);\n};\n\nexport const decimalExponentialRegex = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(E[+-]?\\d+)?$/;\n\nexport const formatDecimalString = (value: string): string => {\n  if (!value.includes('.')) {\n    return value;\n  }\n\n  const split = value.split('.');\n  const integer = split[0];\n  let decimal = split[1];\n\n  decimal = decimal.replace(/0+$/, '');\n\n  while (decimal.length < 3) {\n    decimal += '0';\n  }\n\n  return `${integer}.${decimal}`;\n};\n"],"names":["decimalExponentialRegex","formatDecimalString","transferNumberFormat","val","options","numberFormat","Intl","NumberFormat","undefined","format","value","includes","split","integer","decimal","replace","length"],"mappings":";;;;;;;;;;;IAUaA,uBAAuB;eAAvBA;;IAEAC,mBAAmB;eAAnBA;;IAZAC,oBAAoB;eAApBA;;;AAAN,MAAMA,uBAAuB,CAACC,KAAqBC;IACxD,MAAMC,eAAe,IAAIC,KAAKC,YAAY,CAAC,MAAMH;IAEjD,IAAID,QAAQ,QAAQA,QAAQK,WAAW;QACrC,OAAOL;IACT;IAEA,OAAOE,aAAaI,MAAM,CAACN;AAC7B;AAEO,MAAMH,0BAA0B;AAEhC,MAAMC,sBAAsB,CAACS;IAClC,IAAI,CAACA,MAAMC,QAAQ,CAAC,MAAM;QACxB,OAAOD;IACT;IAEA,MAAME,QAAQF,MAAME,KAAK,CAAC;IAC1B,MAAMC,UAAUD,KAAK,CAAC,EAAE;IACxB,IAAIE,UAAUF,KAAK,CAAC,EAAE;IAEtBE,UAAUA,QAAQC,OAAO,CAAC,OAAO;IAEjC,MAAOD,QAAQE,MAAM,GAAG,EAAG;QACzBF,WAAW;IACb;IAEA,OAAO,GAAGD,QAAQ,CAAC,EAAEC,SAAS;AAChC"}