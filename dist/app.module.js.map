{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { DataSource } from 'typeorm';\nimport { addTransactionalDataSource } from 'typeorm-transactional';\n\nimport { AppController } from '@/app.controller';\nimport commonConfig from '@/config/common.config';\nimport { TypeOrmConfig } from '@/config/typeorm.config';\nimport { LoggerMiddleware } from '@/log/logger.middleware';\nimport { ErrorModule } from '@/module/error.module';\nimport { FileModule } from '@/module/file.module';\nimport { AwsModule } from '@/module/infrastructure/aws.module';\nimport { RedisModule } from '@/module/infrastructure/redis.module';\nimport { TokenProviderModule } from '@/module/token-provider.module';\nimport { RequestContext } from '@/port/audit/request-context.middleware';\n\nconst typeOrmModules = [\n  TypeOrmModule.forRootAsync({\n    imports: [ConfigModule],\n    useFactory: async (configService: ConfigService) => TypeOrmConfig(configService),\n    dataSourceFactory: async (options) => {\n      if (!options) {\n        throw new Error('Invalid options passed');\n      }\n\n      return addTransactionalDataSource(new DataSource(options));\n    },\n    inject: [ConfigService],\n  }),\n];\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV || 'development'}`,\n      load: [commonConfig],\n    }),\n    ...typeOrmModules,\n    AwsModule,\n    FileModule,\n    TerminusModule,\n    // RedisModule,\n    TokenProviderModule,\n    ErrorModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerMiddleware).forRoutes('*').apply(RequestContext).forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n"],"names":["AppModule","typeOrmModules","TypeOrmModule","forRootAsync","imports","ConfigModule","useFactory","configService","TypeOrmConfig","dataSourceFactory","options","Error","addTransactionalDataSource","DataSource","inject","ConfigService","configure","consumer","apply","LoggerMiddleware","forRoutes","RequestContext","path","method","RequestMethod","ALL","forRoot","isGlobal","envFilePath","process","env","NODE_ENV","load","commonConfig","AwsModule","FileModule","TerminusModule","TokenProviderModule","ErrorModule","controllers","AppController"],"mappings":";;;;+BAkDaA;;;eAAAA;;;wBAlDyD;wBAC1B;0BACb;yBACD;0BAEH;sCACgB;+BAEb;qEACL;+BACK;kCACG;6BACL;4BACD;2BACD;qCAEU;0CACL;;;;;;;;;;;;AAE/B,MAAMC,iBAAiB;IACrBC,sBAAa,CAACC,YAAY,CAAC;QACzBC,SAAS;YAACC,oBAAY;SAAC;QACvBC,YAAY,OAAOC,gBAAiCC,IAAAA,4BAAa,EAACD;QAClEE,mBAAmB,OAAOC;YACxB,IAAI,CAACA,SAAS;gBACZ,MAAM,IAAIC,MAAM;YAClB;YAEA,OAAOC,IAAAA,gDAA0B,EAAC,IAAIC,oBAAU,CAACH;QACnD;QACAI,QAAQ;YAACC,qBAAa;SAAC;IACzB;CACD;AAkBM,IAAA,AAAMf,YAAN,MAAMA;IACXgB,UAAUC,QAA4B,EAAQ;QAC5CA,SAASC,KAAK,CAACC,kCAAgB,EAAEC,SAAS,CAAC,KAAKF,KAAK,CAACG,wCAAc,EAAED,SAAS,CAAC;YAAEE,MAAM;YAAKC,QAAQC,qBAAa,CAACC,GAAG;QAAC;IACzH;AACF;;;QApBErB,SAAS;YACPC,oBAAY,CAACqB,OAAO,CAAC;gBACnBC,UAAU;gBACVC,aAAa,CAAC,KAAK,EAAEC,QAAQC,GAAG,CAACC,QAAQ,IAAI,eAAe;gBAC5DC,MAAM;oBAACC,qBAAY;iBAAC;YACtB;eACGhC;YACHiC,oBAAS;YACTC,sBAAU;YACVC,wBAAc;YACd,eAAe;YACfC,wCAAmB;YACnBC,wBAAW;SACZ;QACDC,aAAa;YAACC,4BAAa;SAAC"}