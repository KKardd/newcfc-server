{"version":3,"sources":["../../../src/security/jwt/token.provider.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { v4 } from 'uuid';\n\nimport { ResponseTokenDto } from '@/adapter/inbound/dto/response/response-token.dto';\nimport { Admin } from '@/domain/entity/admin.entity';\nimport { Chauffeur } from '@/domain/entity/chauffeur.entity';\nimport { UserRoleType } from '@/domain/enum/user-role.enum';\nimport { TokenPayload, UserAccessTokenPayload, UserRefreshTokenPayload } from '@/security/jwt/token.payload';\n\nexport const ISS = 'NEWCFC';\nexport const SYSTEM_ISS = 'SYSTEM';\n\n@Injectable()\nexport class TokenProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  createAccessToken(payload: TokenPayload<UserAccessTokenPayload>): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get<string>('JWT_ACCESS_SECRET'),\n      expiresIn: this.configService.get<string>('JWT_ACCESS_EXPIRES_IN'),\n      algorithm: 'HS512',\n    });\n  }\n\n  async verifyAccessToken(accessToken: string): Promise<TokenPayload<UserAccessTokenPayload>> {\n    return this.jwtService.verify(accessToken, {\n      secret: this.configService.get<string>('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  createRefreshToken(payload: TokenPayload<UserRefreshTokenPayload>): string {\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get<string>('JWT_REFRESH_SECRET'),\n      expiresIn: this.configService.get<string>('JWT_REFRESH_EXPIRES_IN'),\n      algorithm: 'HS512',\n    });\n  }\n\n  async verifyRefreshToken(refreshToken: string): Promise<TokenPayload<UserRefreshTokenPayload>> {\n    return this.jwtService.verify(refreshToken, {\n      secret: this.configService.get<string>('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  createToken(user: Admin | Chauffeur): ResponseTokenDto {\n    const userAccessTokenPayload: TokenPayload<UserAccessTokenPayload> = {\n      iss: ISS,\n      sub: user.id.toString(),\n      jti: v4(),\n      payload: {\n        tenantId: 'tenantId' in user ? (user.tenantId as number) : 0,\n        userId: user.id,\n        email: 'email' in user ? (user.email as string) : user.phone,\n        name: user.name,\n        roles: [user.role],\n      },\n    };\n\n    const userRefreshTokenPayload: TokenPayload<UserRefreshTokenPayload> = {\n      iss: ISS,\n      sub: user.id.toString(),\n      jti: v4(),\n      payload: {\n        tenantId: 'tenantId' in user ? (user.tenantId as number) : 0,\n        userId: user.id,\n      },\n    };\n\n    const accessToken = this.createAccessToken(userAccessTokenPayload);\n    const refreshToken = this.createRefreshToken(userRefreshTokenPayload);\n\n    const createdResponseTokenDto = new ResponseTokenDto();\n    createdResponseTokenDto.accessToken = accessToken;\n    createdResponseTokenDto.refreshToken = refreshToken;\n\n    return createdResponseTokenDto;\n  }\n\n  createSystemAccessToken(): string {\n    const userAccessTokenPayload: TokenPayload<UserAccessTokenPayload> = {\n      iss: SYSTEM_ISS,\n      sub: SYSTEM_ISS,\n      jti: v4(),\n      payload: {\n        tenantId: 0,\n        userId: 0,\n        email: SYSTEM_ISS,\n        name: SYSTEM_ISS,\n        roles: [UserRoleType.SUPER_ADMIN],\n      },\n    };\n\n    return this.createAccessToken(userAccessTokenPayload);\n  }\n}\n"],"names":["ISS","SYSTEM_ISS","TokenProvider","createAccessToken","payload","jwtService","sign","secret","configService","get","expiresIn","algorithm","verifyAccessToken","accessToken","verify","createRefreshToken","verifyRefreshToken","refreshToken","createToken","user","userAccessTokenPayload","iss","sub","id","toString","jti","v4","tenantId","userId","email","phone","name","roles","role","userRefreshTokenPayload","createdResponseTokenDto","ResponseTokenDto","createSystemAccessToken","UserRoleType","SUPER_ADMIN","constructor"],"mappings":";;;;;;;;;;;IAYaA,GAAG;eAAHA;;IACAC,UAAU;eAAVA;;IAGAC,aAAa;eAAbA;;;wBAhBc;wBACG;qBACH;sBAER;kCAEc;8BAGJ;;;;;;;;;;AAGtB,MAAMF,MAAM;AACZ,MAAMC,aAAa;AAGnB,IAAA,AAAMC,gBAAN,MAAMA;IAMXC,kBAAkBC,OAA6C,EAAU;QACvE,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACF,SAAS;YACnCG,QAAQ,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;YACvCC,WAAW,IAAI,CAACF,aAAa,CAACC,GAAG,CAAS;YAC1CE,WAAW;QACb;IACF;IAEA,MAAMC,kBAAkBC,WAAmB,EAAiD;QAC1F,OAAO,IAAI,CAACR,UAAU,CAACS,MAAM,CAACD,aAAa;YACzCN,QAAQ,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;QACzC;IACF;IAEAM,mBAAmBX,OAA8C,EAAU;QACzE,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACF,SAAS;YACnCG,QAAQ,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;YACvCC,WAAW,IAAI,CAACF,aAAa,CAACC,GAAG,CAAS;YAC1CE,WAAW;QACb;IACF;IAEA,MAAMK,mBAAmBC,YAAoB,EAAkD;QAC7F,OAAO,IAAI,CAACZ,UAAU,CAACS,MAAM,CAACG,cAAc;YAC1CV,QAAQ,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;QACzC;IACF;IAEAS,YAAYC,IAAuB,EAAoB;QACrD,MAAMC,yBAA+D;YACnEC,KAAKrB;YACLsB,KAAKH,KAAKI,EAAE,CAACC,QAAQ;YACrBC,KAAKC,IAAAA,QAAE;YACPtB,SAAS;gBACPuB,UAAU,cAAcR,OAAQA,KAAKQ,QAAQ,GAAc;gBAC3DC,QAAQT,KAAKI,EAAE;gBACfM,OAAO,WAAWV,OAAQA,KAAKU,KAAK,GAAcV,KAAKW,KAAK;gBAC5DC,MAAMZ,KAAKY,IAAI;gBACfC,OAAO;oBAACb,KAAKc,IAAI;iBAAC;YACpB;QACF;QAEA,MAAMC,0BAAiE;YACrEb,KAAKrB;YACLsB,KAAKH,KAAKI,EAAE,CAACC,QAAQ;YACrBC,KAAKC,IAAAA,QAAE;YACPtB,SAAS;gBACPuB,UAAU,cAAcR,OAAQA,KAAKQ,QAAQ,GAAc;gBAC3DC,QAAQT,KAAKI,EAAE;YACjB;QACF;QAEA,MAAMV,cAAc,IAAI,CAACV,iBAAiB,CAACiB;QAC3C,MAAMH,eAAe,IAAI,CAACF,kBAAkB,CAACmB;QAE7C,MAAMC,0BAA0B,IAAIC,kCAAgB;QACpDD,wBAAwBtB,WAAW,GAAGA;QACtCsB,wBAAwBlB,YAAY,GAAGA;QAEvC,OAAOkB;IACT;IAEAE,0BAAkC;QAChC,MAAMjB,yBAA+D;YACnEC,KAAKpB;YACLqB,KAAKrB;YACLwB,KAAKC,IAAAA,QAAE;YACPtB,SAAS;gBACPuB,UAAU;gBACVC,QAAQ;gBACRC,OAAO5B;gBACP8B,MAAM9B;gBACN+B,OAAO;oBAACM,0BAAY,CAACC,WAAW;iBAAC;YACnC;QACF;QAEA,OAAO,IAAI,CAACpC,iBAAiB,CAACiB;IAChC;IAlFAoB,YACE,AAAiBnC,UAAsB,EACvC,AAAiBG,aAA4B,CAC7C;aAFiBH,aAAAA;aACAG,gBAAAA;IAChB;AAgFL"}