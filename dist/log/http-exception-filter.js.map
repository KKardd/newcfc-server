{"version":3,"sources":["../../src/log/http-exception-filter.ts"],"sourcesContent":["import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  InternalServerErrorException,\n  BadRequestException,\n  UnauthorizedException,\n  ForbiddenException,\n  NotFoundException,\n} from '@nestjs/common';\n\nimport { Request, Response } from 'express';\nimport { QueryFailedError } from 'typeorm';\n\nimport { ErrorResponse } from '@/adapter/inbound/dto/response/error-response';\nimport { ErrorLog } from '@/domain/entity/error-log.entity';\nimport { CustomException } from '@/exception/custom.exception';\nimport { logging } from '@/log/logging';\nimport { ErrorLogServiceOutPort } from '@/port/outbound/error-log-service.out-port';\n\n@Catch(\n  HttpException,\n  InternalServerErrorException,\n  CustomException,\n  BadRequestException,\n  UnauthorizedException,\n  ForbiddenException,\n  NotFoundException,\n  QueryFailedError,\n)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private readonly logger = logging();\n\n  constructor(private readonly errorLogRepository: ErrorLogServiceOutPort) {}\n\n  async catch(\n    exception:\n      | HttpException\n      | InternalServerErrorException\n      | CustomException\n      | BadRequestException\n      | UnauthorizedException\n      | ForbiddenException\n      | NotFoundException\n      | QueryFailedError,\n    host: ArgumentsHost,\n  ) {\n    this.logger.error(`Exception caught: ${exception.message}`);\n\n    const startTime = process.hrtime();\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    const response = ctx.getResponse<Response>();\n\n    let accessToken: string = '';\n    let status = 500;\n    if (exception instanceof QueryFailedError) {\n      status = 500;\n    } else {\n      status = exception.getStatus ? exception.getStatus() : 500;\n    }\n\n    const errorResponse: ErrorResponse = {\n      httpStatus: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message: exception.message,\n    };\n\n    if (exception instanceof CustomException) {\n      errorResponse.errorCode = exception.getErrorCode();\n      errorResponse.message = exception.getCustomMessage();\n    }\n\n    if (exception instanceof QueryFailedError) {\n      errorResponse.message = exception.message;\n    }\n\n    const maskedBody = { ...request.body };\n    if (maskedBody.password) {\n      maskedBody.password = '**********';\n    }\n    if (maskedBody.accessToken) {\n      maskedBody.accessToken = '**********';\n    }\n    if (maskedBody.accessToken) {\n      maskedBody.refreshToken = '**********';\n    }\n\n    const maskedHeaders = { ...request.headers };\n    if (maskedHeaders.authorization) {\n      accessToken = maskedHeaders.authorization.replace(/Bearer\\s+/i, '');\n      maskedHeaders.authorization = maskedHeaders.authorization.replace(/Bearer .+/i, 'Bearer **********');\n    }\n\n    this.logger.error(`HttpException : ${request.method} ${request.originalUrl} - ${JSON.stringify(errorResponse)}`);\n\n    const endTime = process.hrtime(startTime);\n    const elapsedTime = Math.round(endTime[0] * 1000 + endTime[1] / 1000000);\n\n    const errorLog = new ErrorLog();\n    errorLog.service = 'track';\n    errorLog.requestUrl = request.originalUrl;\n    errorLog.accessToken = accessToken;\n    errorLog.method = request.method;\n    errorLog.header = JSON.stringify(maskedHeaders);\n    errorLog.param = JSON.stringify(request.params);\n    errorLog.query = JSON.stringify(request.query);\n    errorLog.body = JSON.stringify(maskedBody);\n    errorLog.status = status.toString();\n    errorLog.responseBody = JSON.stringify(errorResponse);\n    errorLog.stackTrace = exception.stack || '';\n    errorLog.elapsedTime = elapsedTime;\n    errorLog.createdAt = new Date();\n\n    await this.errorLogRepository.save(errorLog);\n\n    response.status(status).json(errorResponse);\n  }\n}\n"],"names":["HttpExceptionFilter","catch","exception","host","logger","error","message","startTime","process","hrtime","ctx","switchToHttp","request","getRequest","response","getResponse","accessToken","status","QueryFailedError","getStatus","errorResponse","httpStatus","timestamp","Date","toISOString","path","url","method","CustomException","errorCode","getErrorCode","getCustomMessage","maskedBody","body","password","refreshToken","maskedHeaders","headers","authorization","replace","originalUrl","JSON","stringify","endTime","elapsedTime","Math","round","errorLog","ErrorLog","service","requestUrl","header","param","params","query","toString","responseBody","stackTrace","stack","createdAt","errorLogRepository","save","json","constructor","logging"],"mappings":"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"}