{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nimport { json, urlencoded } from 'body-parser';\nimport compression from 'compression';\nimport helmet from 'helmet';\nimport { initializeTransactionalContext } from 'typeorm-transactional';\n\nimport { TransformInterceptor } from '@/adapter/inbound/dto/transform.interceptor';\nimport { AppModule } from '@/app.module';\nimport { setSwagger } from '@/config/swagger.config';\nimport { GLOBAL_PREFIX } from '@/constants';\nimport { HttpExceptionFilter } from '@/log/http-exception-filter';\nimport { logging } from '@/log/logging';\nimport { ErrorModule } from '@/module/error.module';\nimport { ErrorLogServiceOutPort } from '@/port/outbound/error-log-service.out-port';\nimport { GlobalValidation } from '@/validate/global-validation-pipe';\n\nasync function bootstrap() {\n  initializeTransactionalContext();\n\n  const app = await NestFactory.create<NestExpressApplication>(AppModule, {\n    logger: logging(),\n    abortOnError: true,\n  });\n\n  const logger = new Logger('Bootstrap');\n\n  const configService = app.get(ConfigService);\n  const environment = configService.getOrThrow<string>('common.environment');\n  const nodeEnv = configService.getOrThrow<string>('common.nodeEnv');\n\n  // Set global prefix\n  app.setGlobalPrefix(GLOBAL_PREFIX);\n\n  app.use(compression());\n\n  // Request Body Size 설정\n  app.use(json({ limit: '50mb' }));\n  app.use(urlencoded({ limit: '50mb', extended: true }));\n\n  app.use(\n    helmet({\n      contentSecurityPolicy: false,\n      crossOriginEmbedderPolicy: true,\n      frameguard: { action: 'deny' },\n      xPoweredBy: true,\n      xXssProtection: true,\n      xContentTypeOptions: true,\n    }),\n  );\n\n  // Enable CORS\n  app.enableCors({\n    origin: configService.get<string[]>('common.cors.allowedOrigins'),\n  });\n\n  setSwagger(app);\n\n  // Register global pipes, interceptors, filters\n  app.useGlobalPipes(\n    new GlobalValidation({\n      whitelist: true,\n      transform: true,\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n    }),\n  );\n  app.useGlobalInterceptors(new TransformInterceptor());\n  const errorLogRepository = app.select(ErrorModule).get<ErrorLogServiceOutPort>(ErrorLogServiceOutPort, { strict: true });\n  app.useGlobalFilters(new HttpExceptionFilter(errorLogRepository));\n\n  // Start the application\n  const httpPort = configService.getOrThrow<number>('common.httpPort');\n  await app.listen(httpPort);\n\n  logger.log(`ENVIRONMENT: ${environment}`);\n  logger.log(`NODE_ENV: ${nodeEnv}`);\n  logger.log(`Listening on port ${httpPort}`);\n}\nbootstrap();\n"],"names":["bootstrap","initializeTransactionalContext","app","NestFactory","create","AppModule","logger","logging","abortOnError","Logger","configService","get","ConfigService","environment","getOrThrow","nodeEnv","setGlobalPrefix","GLOBAL_PREFIX","use","compression","json","limit","urlencoded","extended","helmet","contentSecurityPolicy","crossOriginEmbedderPolicy","frameguard","action","xPoweredBy","xXssProtection","xContentTypeOptions","enableCors","origin","setSwagger","useGlobalPipes","GlobalValidation","whitelist","transform","transformOptions","enableImplicitConversion","useGlobalInterceptors","TransformInterceptor","errorLogRepository","select","ErrorModule","ErrorLogServiceOutPort","strict","useGlobalFilters","HttpExceptionFilter","httpPort","listen","log"],"mappings":";;;;wBAAuB;wBACO;sBACF;4BAGK;oEACT;+DACL;sCAC4B;sCAEV;2BACX;+BACC;2BACG;qCACM;yBACZ;6BACI;wCACW;sCACN;;;;;;AAEjC,eAAeA;IACbC,IAAAA,oDAA8B;IAE9B,MAAMC,MAAM,MAAMC,iBAAW,CAACC,MAAM,CAAyBC,oBAAS,EAAE;QACtEC,QAAQC,IAAAA,gBAAO;QACfC,cAAc;IAChB;IAEA,MAAMF,SAAS,IAAIG,cAAM,CAAC;IAE1B,MAAMC,gBAAgBR,IAAIS,GAAG,CAACC,qBAAa;IAC3C,MAAMC,cAAcH,cAAcI,UAAU,CAAS;IACrD,MAAMC,UAAUL,cAAcI,UAAU,CAAS;IAEjD,oBAAoB;IACpBZ,IAAIc,eAAe,CAACC,wBAAa;IAEjCf,IAAIgB,GAAG,CAACC,IAAAA,oBAAW;IAEnB,uBAAuB;IACvBjB,IAAIgB,GAAG,CAACE,IAAAA,gBAAI,EAAC;QAAEC,OAAO;IAAO;IAC7BnB,IAAIgB,GAAG,CAACI,IAAAA,sBAAU,EAAC;QAAED,OAAO;QAAQE,UAAU;IAAK;IAEnDrB,IAAIgB,GAAG,CACLM,IAAAA,eAAM,EAAC;QACLC,uBAAuB;QACvBC,2BAA2B;QAC3BC,YAAY;YAAEC,QAAQ;QAAO;QAC7BC,YAAY;QACZC,gBAAgB;QAChBC,qBAAqB;IACvB;IAGF,cAAc;IACd7B,IAAI8B,UAAU,CAAC;QACbC,QAAQvB,cAAcC,GAAG,CAAW;IACtC;IAEAuB,IAAAA,yBAAU,EAAChC;IAEX,+CAA+C;IAC/CA,IAAIiC,cAAc,CAChB,IAAIC,sCAAgB,CAAC;QACnBC,WAAW;QACXC,WAAW;QACXC,kBAAkB;YAChBC,0BAA0B;QAC5B;IACF;IAEFtC,IAAIuC,qBAAqB,CAAC,IAAIC,0CAAoB;IAClD,MAAMC,qBAAqBzC,IAAI0C,MAAM,CAACC,wBAAW,EAAElC,GAAG,CAAyBmC,8CAAsB,EAAE;QAAEC,QAAQ;IAAK;IACtH7C,IAAI8C,gBAAgB,CAAC,IAAIC,wCAAmB,CAACN;IAE7C,wBAAwB;IACxB,MAAMO,WAAWxC,cAAcI,UAAU,CAAS;IAClD,MAAMZ,IAAIiD,MAAM,CAACD;IAEjB5C,OAAO8C,GAAG,CAAC,CAAC,aAAa,EAAEvC,aAAa;IACxCP,OAAO8C,GAAG,CAAC,CAAC,UAAU,EAAErC,SAAS;IACjCT,OAAO8C,GAAG,CAAC,CAAC,kBAAkB,EAAEF,UAAU;AAC5C;AACAlD"}