{"version":3,"sources":["../../src/validate/global-validation-pipe.ts"],"sourcesContent":["import { ArgumentMetadata, BadRequestException, Injectable, PipeTransform, ValidationPipeOptions } from '@nestjs/common';\n\nimport { plainToInstance } from 'class-transformer';\nimport { ValidationError, ValidationOptions, validate } from 'class-validator';\n\n@Injectable()\nexport class GlobalValidation implements PipeTransform<unknown> {\n  constructor(options?: ValidationPipeOptions) {\n    this.options = options;\n  }\n\n  private options?: ValidationOptions;\n\n  async transform(value: object, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n\n    const model = Object.assign(value);\n\n    for (const property in model) {\n      if (model[property] == 'null') {\n        model[property] = null;\n      }\n    }\n\n    const newModel = plainToInstance(metatype, model, {\n      enableImplicitConversion: true,\n    });\n    const errors = await validate(newModel, this.options);\n\n    if (errors.length > 0) {\n      const messageItems = this.formatErrors(errors);\n      throw new BadRequestException(messageItems.join('\\r\\n'));\n    }\n\n    return newModel;\n  }\n\n  private toValidate(metatype: unknown): boolean {\n    const types: unknown[] = [String, Boolean, Number, Array, Object];\n\n    return !types.includes(metatype);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const result: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        for (const constraintKey in error.constraints) {\n          result.push(`${error.property}: ${error.constraints[constraintKey]}`);\n        }\n      }\n      if (error.children && error.children.length > 0) {\n        result.push(...this.formatErrors(error.children));\n      }\n    });\n    return result;\n  }\n}\n"],"names":["GlobalValidation","transform","value","metatype","toValidate","model","Object","assign","property","newModel","plainToInstance","enableImplicitConversion","errors","validate","options","length","messageItems","formatErrors","BadRequestException","join","types","String","Boolean","Number","Array","includes","result","forEach","error","constraints","constraintKey","push","children","constructor"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBAN2F;kCAExE;gCAC6B;;;;;;;;;;AAGtD,IAAA,AAAMA,mBAAN,MAAMA;IAOX,MAAMC,UAAUC,KAAa,EAAE,EAAEC,QAAQ,EAAoB,EAAE;QAC7D,IAAI,CAACA,YAAY,CAAC,IAAI,CAACC,UAAU,CAACD,WAAW;YAC3C,OAAOD;QACT;QAEA,MAAMG,QAAQC,OAAOC,MAAM,CAACL;QAE5B,IAAK,MAAMM,YAAYH,MAAO;YAC5B,IAAIA,KAAK,CAACG,SAAS,IAAI,QAAQ;gBAC7BH,KAAK,CAACG,SAAS,GAAG;YACpB;QACF;QAEA,MAAMC,WAAWC,IAAAA,iCAAe,EAACP,UAAUE,OAAO;YAChDM,0BAA0B;QAC5B;QACA,MAAMC,SAAS,MAAMC,IAAAA,wBAAQ,EAACJ,UAAU,IAAI,CAACK,OAAO;QAEpD,IAAIF,OAAOG,MAAM,GAAG,GAAG;YACrB,MAAMC,eAAe,IAAI,CAACC,YAAY,CAACL;YACvC,MAAM,IAAIM,2BAAmB,CAACF,aAAaG,IAAI,CAAC;QAClD;QAEA,OAAOV;IACT;IAEQL,WAAWD,QAAiB,EAAW;QAC7C,MAAMiB,QAAmB;YAACC;YAAQC;YAASC;YAAQC;YAAOlB;SAAO;QAEjE,OAAO,CAACc,MAAMK,QAAQ,CAACtB;IACzB;IAEQc,aAAaL,MAAyB,EAAY;QACxD,MAAMc,SAAmB,EAAE;QAC3Bd,OAAOe,OAAO,CAAC,CAACC;YACd,IAAIA,MAAMC,WAAW,EAAE;gBACrB,IAAK,MAAMC,iBAAiBF,MAAMC,WAAW,CAAE;oBAC7CH,OAAOK,IAAI,CAAC,GAAGH,MAAMpB,QAAQ,CAAC,EAAE,EAAEoB,MAAMC,WAAW,CAACC,cAAc,EAAE;gBACtE;YACF;YACA,IAAIF,MAAMI,QAAQ,IAAIJ,MAAMI,QAAQ,CAACjB,MAAM,GAAG,GAAG;gBAC/CW,OAAOK,IAAI,IAAI,IAAI,CAACd,YAAY,CAACW,MAAMI,QAAQ;YACjD;QACF;QACA,OAAON;IACT;IAnDAO,YAAYnB,OAA+B,CAAE;QAC3C,IAAI,CAACA,OAAO,GAAGA;IACjB;AAkDF"}